########################################
## macros configuration 
## https://github.com/KevinOConnor/klipper/blob/master/config/sample-macros.cfg
########################################

[gcode_macro _globals]
# variable_filament_sensor_enabled: 0 # NOTE Enable(1) or disable(0) the filament sensor, if one is connected
variable_beeping_enabled: 1
variable_bed_temp_over: 10 # Start print if bed temperature is over by this amount, otherwise wait for temperature drop
variable_kamp_enable: 1
variable_pre_purge_prime_length: 1.50
gcode:
    # Don't delete this section

[gcode_macro START_PRINT]
gcode:
    # Parameters
    {% set BED_TEMP = params.BED|int %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|int %}
    {% set MANUAL_MESH = params.MANUAL_MESH|default(0)|int %}
    
    # Other variables
    {% set lowerTemp = 5 %}
    {% set bedtempTarget = BED_TEMP %}
    {% set bedtempStart = BED_TEMP - lowerTemp %}
    {% set bedtempPreheat = (50, BED_TEMP - lowerTemp)|min %}
    {% set bedtempOver = printer["gcode_macro _globals"].bed_temp_over|default(0)|int %}
    {% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
    {% set maxVelocityAdjusted = 10000 %} ; (0.90 * maxVelocity * 60)|int
    {% set kampEnabled = printer["gcode_macro _globals"].kamp_enable|default(0)|int %}

    {% if MANUAL_MESH == 1 %}
        {% set kampEnabled = 0 %}
    {% endif %}

    {% if printer.configfile.settings.safe_z_home %}
        {% set startX = printer.configfile.settings.safe_z_home.home_xy_position[0]|float %}
        {% set startY = printer.configfile.settings.safe_z_home.home_xy_position[1]|float %}
    {% endif %}

    {% set bedtempCurrent = printer.heater_bed.temperature|int %}
    {% set hotendtempPreheat = 130 %}
    {% set hotendtempStepOne = ((EXTRUDER_TEMP, printer[printer.toolhead.extruder].temperature|int)|min, 150)|max %}
    {% set hotendtempStepTwo = ((EXTRUDER_TEMP, printer[printer.toolhead.extruder].temperature|int)|min, 170)|max %}

    # If bed-temp-almost is higher than bed-temp by a maximum of bed-temp-over
    {% if bedtempCurrent > bedtempStart %}
        {% if (bedtempCurrent - bedtempOver) <= bedtempTarget %}
            {% set bedtempStart = bedtempCurrent %}
            {% set bedtempPreheat = bedtempCurrent %}
        {% else %} 
            {% set bedtempStart = bedtempTarget + bedtempOver %}
            {% set bedtempPreheat = bedtempStart %}
        {% endif %}
    {% endif %}

    # Initial pre-heat
    M104 S{hotendtempPreheat}                            ; don't wait for hotend temp
    {% if BED_TEMP > 0 %}
        M190 S{bedtempPreheat}                           ; wait for bed temp
    {% endif %}

    # Start heating, Home X Y and Park at the center
    BED_MESH_CLEAR
    G90                                                  ; absolute positioning
    M140 S{bedtempStart}                                 ; don't wait for bed temp
    G28 X Y
    {% if printer.configfile.settings.safe_z_home %}
        G1 X{startX} Y{startY} F{maxVelocityAdjusted}
    {% endif %}
    M104 S{hotendtempStepTwo}                            ; don't wait for hotend temp

    # Heat & wait Bed
    M190 S{bedtempStart}                                 ; wait for bed temp
    {% if kampEnabled == 0 %}
        M104 S{hotendtempStepTwo}                        ; don't wait for hotend temp
    {% endif %}
    M140 S{bedtempTarget}                                ; Final target bed heat - don't wait for bed temp

    # KAMP Bed Mesh
    {% if kampEnabled == 0 %}
        BED_MESH_PROFILE LOAD=default                    ; NOTE if not using a mesh, comment out this line
        M104 S{EXTRUDER_TEMP}                            ; don't wait for hotend temp
        G28 Z                                            ; final z homing
    {% else %}
        G28 Z                                            ; final z homing
        BED_MESH_CALIBRATE                               ; KAMP mesh
        M104 S{EXTRUDER_TEMP}                            ; don't wait for hotend temp
    {% endif %}

    SMART_PARK
    M109 S{EXTRUDER_TEMP}                                ; wait for hotend temp

    BEEP DUR=100 FREQ=100
    HEAD_LED_MID
    # VORON_PURGE
    # LINE_PURGE
    LINE_PURGE_MOD
    G92 E0 ; reset extruder


[gcode_macro END_PRINT]
gcode:    
    {% set PRE_PURGE_PRIME_LENGTH = printer["gcode_macro _globals"].pre_purge_prime_length|default(1.50)|float %}

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Set safe speeds
    {% set park_pos_x = 20 %}
    {% set park_pos_y = max_y - 20 %}
    {% set safe_z = 15 %}
    {% set zVelocity = printer.configfile.settings.printer.max_z_velocity|default(15)|int %}
    {% set maxVelocity = printer.configfile.settings.printer.max_velocity|default(200)|int %}
    {% set zVelocityAdjusted =  (0.95 * zVelocity * 60)|int  %}
    {% set maxVelocityAdjusted =  (0.95 * maxVelocity * 60)|int  %}

    {% if printer.toolhead.position.z > (max_z - safe_z) %}
        {% set safe_z = max_z - printer.toolhead.position.z %}
    {% endif %}

    M400                                    ; wait for buffer to clear
    G92 E0                                  ; zero the extruder
    G1 E-{PRE_PURGE_PRIME_LENGTH} F2100     ; retract filament

    G91                                                     ; relative positioning
    G0 Z{safe_z} F{zVelocityAdjusted}                       ; move nozzle up
    G90                                                     ; absolute positioning

    BEEP I=2 DUR=200 FREQ=50
    # G0 X{park_pos_x} Y{park_pos_y} F6000                    ; move nozzle to remove stringing
    G0 X{park_pos_x} F6000                    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    M84                            ; Disable steppers
    HEAD_LED_OFF


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    END_PRINT
    BASE_CANCEL_PRINT

# [gcode_macro G29]
# gcode:
#     {% set profile_name = 'default' %}
#     BED_MESH_PROFILE REMOVE={profile_name}
#     G28
#     BED_MESH_CALIBRATE SAVE={profile_name}
#     SAVE_CONFIG

### Pause / Resume ##############################################################################################

[pause_resume]

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
    RESPOND MSG="Filament change launched"
    BEEP I=1 DUR=300 FREQ=150
    BEEP I=2 DUR=150 FREQ=3200
    PAUSE FRONT=1
    HEAD_LED_RED


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set park_y = 10 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|int %}
    {% set pos_z = printer.toolhead.position.z|float %}
    {% set z = params.Z|default(10)|float %}
    {% set MOVE_TO_FRONT = params.FRONT|default(0)|int %}
    {% set RETRACT = params.E|default(2.5)|int %}

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_LED LED=head_led RED=1 GREEN=1 BLUE=0
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        RESPOND MSG="Pause..."
        BEEP I=1 DUR=300 FREQ=150
        SET_IDLE_TIMEOUT TIMEOUT=86400

        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        G91                                                                                  ; relative positioning
        M83
        G1 E-{RETRACT} F2100
        M82
        {% if (pos_z + z) < max_z %}                                                         ; check that zhop doesn't exceed z max
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        {% if MOVE_TO_FRONT == 1 %}
            G1 Y{park_y} F6000                                                           ; park toolhead at front
        {% endif %}
        SAVE_GCODE_STATE NAME=PAUSE_PARK                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
gcode:
    {% set e = params.E|default(2.5)|int %}

    {% if printer['pause_resume'].is_paused|int == 1 %}
        RESPOND MSG="Resuming..."
        HEAD_LED_MID
        RESTORE_GCODE_STATE NAME=PAUSE_PARK MOVE=1 MOVE_SPEED=100                    ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            M83                                                                      ; relative extruder positioning
            G1 E{e} F300
            M82
        {% else %}
            G1 Z-{zhop} F600                                                         ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        G90
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                         ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro RESONANCE]
gcode:
    SHAPER_CALIBRATE

#[gcode_macro SCREWS_TILT_CALC]
#gcode: SCREWS_TILT_CALCULATE

#[gcode_macro PROBE_CAL]
#gcode: PROBE_CALIBRATE

[gcode_macro MAINT_EXTRUDER]
gcode: G1 X150 Y0 F2100

[gcode_macro MOTORS_OFF]
gcode: M84

### Beeper / Buzzer #############################################################################################

[gcode_macro BEEP]
description: BEEP I=3 DUR=200 FREQ=2000: Beep 3 times, for 200ms each, at 2kHz frequency.
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.
    {% set BEEPING_ENABLED=printer["gcode_macro _globals"].beeping_enabled|default(-1)|int %}

    {% if BEEPING_ENABLED == 1 %}
        {% for iteration in range(i|int) %}
            SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
            G4 P{dur}
            SET_PIN PIN=beeper VALUE=0
            G4 P{dur}
        {% endfor %}
    {% endif %}


[gcode_macro M300]
description: Emits and audible beep
    Usage: M300 [P<duration>] [S<frequency>]
gcode:
#    {% set S = params.S|default(1000)|int %}
#    {% set P = params.P|default(200)|int %}
#    SET_PIN PIN=beeper VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
#    G4 P{P}
#    SET_PIN PIN=beeper VALUE=0
    {% set settings = printer.configfile.settings %}
    {% set P = (params.P|default(200)|int, 0)|max %}
    {% set S = (params.S|default(10000)|int, 1)|max %}
    SET_PIN PIN=beeper VALUE={% if settings["output_pin beeper"].pwm %}{
        settings["output_pin beeper"].scale|default(1.0) * 0.5
      } CYCLE_TIME={ 1.0 / S }{% else %}1{% endif %}
    G4 P{P}
    SET_PIN PIN=beeper VALUE=0


[gcode_macro PLAY_TONE]
gcode:
   {% set l = params.L|default(0)|int %}

   {% if l == 1 %} ; play first tone #Here we go
     M300 P184 S392
     M300 P184 S523
     M300 P187 S659
     M300 P417 S784
     M300 P139 S659
     M300 P400 S784  

   {% elif l == 2 %} #play second tone #Mario Death
     M300 P146 S494
     M300 P97 S698
     M300 P157 S0
     M300 P132 S698
     M300 P174 S698
     M300 P168 S659
     M300 P176 S587
     M300 P134 S523
     M300 P95 S330
     M300 P31 S0
   
  {% elif l == 3 %} #play second tone #MarioWorld start theme
    M300 P100 S659
    M300 P200 S659
    M300 P99 S659
    M300 P101 S0
    M300 P100 S523
    M300 P99 S659
    M300 P101 S0
    M300 P199 S784
    M300 P201 S0
    M300 P199 S392

   {% elif l == 4 %} #play third tone #Ode to joy
    M300 P353 S330
    M300 P353 S330
    M300 P353 S349
    M300 P353 S392
    M300 P353 S392
    M300 P353 S349
    M300 P353 S330
    M300 P353 S294
    M300 P353 S262
    M300 P353 S262
    M300 P353 S294
    M300 P353 S330
    M300 P529 S330
    M300 P176 S294
    M300 P706 S294

   {% else %}
    M300 P100 S0 #play nothing
   {% endif %} 

### Prime Nozzle ################################################################################################

[gcode_macro PRIME_NOZZLE]
gcode:
    SAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE
    RESPOND MSG="Priming"
    G90                 ; Absolute coordinates.
    M83                 ; Relative extruder mode.
    G92 E0
    ; Move to start of line
    ; G1 Z3 F300
    G1 X300 Y200 F4500
    G1 Z0.25 F300
    ; Print the line
    G91                ; Relative coordinates.
    G1 Y-80 E25 F1000  ; Extrude filament 25mm (how much it retracted in PRINT_END).
    G1 X-2 F1000
    G1 Y50 E9 F1000    ; Print second part of the line.
    # G1 E-0.5 F3000      ; Retract to avoid stringing.
    G1 Y-0.5 E0 F1000    ; Wipe back to break string.
    G1 Y5.5 E0 F1000   ; Wipe forward to break string.
    G90
    RESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE


[gcode_macro PRIME_NOZZLE_LITE]
gcode:
    SAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE
    RESPOND MSG="Priming"
    G90                 ; Absolute coordinates.
    M83                 ; Relative extruder mode.
    G92 E0
    ; Move to start of line
    ; G1 Z3 F300
    G1 X300 Y250 F3600
    G1 Z0.25 F300
    ; Print the line
    G91                ; Relative coordinates.
    G1 Y-40 E8 F1000  ; Extrude filament (how much it retracted in PRINT_END).
    G1 X-2 F1000
    G1 Y20 E4 F1000    ; Print second part of the line.
    # G1 E-0.5 F3000      ; Retract to avoid stringing.
    G1 Y-0.5 E0 F1000    ; Wipe back to break string.
    G1 Y5.5 E0 F1000   ; Wipe forward to break string.
    G90
    RESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE

### Filament ####################################################################################################

[gcode_macro UNLOAD_FILAMENT]
gcode:
variable_start_unload_distance:  30
variable_unload_distance:  65
variable_purge_distance:  10
gcode:
    RESPOND MSG="Unloading Filament"
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = params.MAX_SPEED|default(2100) %}
    {% set mid_velocity = params.MAX_SPEED|default(1200) %}
    # {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    M83
    G1 E{purge_distance} F{speed} # purge
    G1 E-{start_unload_distance} F{max_velocity} # super fast unload
    G1 E-{unload_distance} F{mid_velocity} # fast unload
    M82
    RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro LOAD_FILAMENT]
gcode:
variable_load_distance:  80
variable_purge_distance:  25
gcode:
    RESPOND MSG="Loading Filament"
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = params.MAX_SPEED|default(300) %}
    # {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    M83 # G91 + G92 E0
    # G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    M82
    RESTORE_GCODE_STATE NAME=load_state

### Exclude Object ##############################################################################################

[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

### Neopixel LED ################################################################################################

[gcode_macro HEAD_LED_FULL]
#    SET_LED LED=head_led RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=1
gcode:
    SET_LED LED=head_led RED=1 GREEN=1 BLUE=1

[gcode_macro HEAD_LED_MID]
gcode:
    SET_LED LED=head_led RED=0.5 GREEN=0.5 BLUE=0.5

[gcode_macro HEAD_LED_LOW]
gcode:
    SET_LED LED=head_led RED=0.2 GREEN=0.2 BLUE=0.2

[gcode_macro HEAD_LED_RED]
gcode:
    SET_LED LED=head_led RED=1 GREEN=0 BLUE=0

[gcode_macro HEAD_LED_GREEN]
gcode:
    SET_LED LED=head_led RED=0 GREEN=1 BLUE=0

[gcode_macro HEAD_LED_BLUE]
gcode:
    SET_LED LED=head_led RED=0 GREEN=0 BLUE=1

[gcode_macro HEAD_LED_OFF]
gcode:
    SET_LED LED=head_led RED=0 GREEN=0 BLUE=0
